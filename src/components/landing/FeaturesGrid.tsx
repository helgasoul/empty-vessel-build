
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { 
  ClipboardList, 
  Smartphone, 
  Brain, 
  Calendar, 
  TrendingUp,
  ArrowRight,
  CheckCircle
} from "lucide-react";
import { useNavigate } from 'react-router-dom';

const FeaturesGrid = () => {
  const navigate = useNavigate();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –æ—Ç–ª–∞–¥–∫–æ–π
  const handleButtonClick = (stepName: string, targetPath: string) => {
    return () => {
      console.log(`üî• –®–∞–≥ "${stepName}" - –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞`);
      console.log(`üìç –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: ${targetPath}`);
      
      try {
        navigate(targetPath);
        console.log(`‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –∫ ${targetPath}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:`, error);
        // Fallback –¥–ª—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
        window.location.href = targetPath;
      }
    };
  };

  const journeySteps = [
    {
      step: "1Ô∏è‚É£",
      title: "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ",
      subtitle: "5 –º–∏–Ω—É—Ç",
      description: "–ê–Ω–∫–µ—Ç–∞ –∑–¥–æ—Ä–æ–≤—å—è + —Å–µ–º–µ–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è",
      icon: ClipboardList,
      color: "from-blue-500 to-cyan-600",
      bgColor: "bg-blue-50",
      details: ["–ë–∞–∑–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–¥–æ—Ä–æ–≤—å—è", "–ò—Å—Ç–æ—Ä–∏—è —Å–µ–º—å–∏", "–¢–µ–∫—É—â–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏"],
      buttonText: "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É",
      targetPath: "/auth"
    },
    {
      step: "2Ô∏è‚É£",
      title: "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ",
      subtitle: "–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ",
      description: "Apple Health, –∞–Ω–∞–ª–∏–∑—ã, –≥–µ–Ω–µ—Ç–∏–∫–∞",
      icon: Smartphone,
      color: "from-green-500 to-emerald-600",
      bgColor: "bg-green-50",
      details: ["–î–∞–Ω–Ω—ã–µ —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä–æ–≤", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤", "–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã"],
      buttonText: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
      targetPath: "/medical-integrations"
    },
    {
      step: "3Ô∏è‚É£",
      title: "–ü–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤",
      subtitle: "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ",
      description: "–ò–ò –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–∏—Å–∫–∏ —Ä–∞–∫–∞, —Å–µ—Ä–¥—Ü–∞, –¥–∏–∞–±–µ—Ç–∞",
      icon: Brain,
      color: "from-purple-500 to-indigo-600",
      bgColor: "bg-purple-50",
      details: ["–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤", "–ù–∞—É—á–Ω–æ-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã", "–ü–æ–Ω—è—Ç–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è"],
      buttonText: "–î–µ–º–æ –∞–Ω–∞–ª–∏–∑–∞",
      targetPath: "/risk-assessment-demo"
    },
    {
      step: "4Ô∏è‚É£",
      title: "–°–ª–µ–¥—É–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –ø–ª–∞–Ω—É",
      subtitle: "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏",
      description: "–ê–Ω–∞–ª–∏–∑—ã, –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏, –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞",
      icon: Calendar,
      color: "from-orange-500 to-red-600",
      bgColor: "bg-orange-50",
      details: ["–ü–ª–∞–Ω –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é", "–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ä—ã"],
      buttonText: "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω",
      targetPath: "/personal-plan"
    },
    {
      step: "5Ô∏è‚É£",
      title: "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å",
      subtitle: "–†–µ–≥—É–ª—è—Ä–Ω–æ",
      description: "–í–∏–¥–∏—Ç–µ, –∫–∞–∫ —Å–Ω–∏–∂–∞—é—Ç—Å—è –≤–∞—à–∏ —Ä–∏—Å–∫–∏",
      icon: TrendingUp,
      color: "from-teal-500 to-blue-600",
      bgColor: "bg-teal-50",
      details: ["–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π", "–û—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞"],
      buttonText: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å",
      targetPath: "/auth"
    }
  ];

  const benefits = [
    "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π",
    "–ü–ª–∞–Ω –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –Ω–∞ –≥–æ–¥",
    "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏",
    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ä–∞—Ö",
    "–°–≤—è–∑—å —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –≤—Ä–∞—á–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
  ];

  return (
    <section className="py-20 px-4 md:px-6 bg-gradient-to-br from-gray-50 to-white">
      <div className="max-w-7xl mx-auto">
        {/* How it works */}
        <div className="text-center mb-16">
          <Badge className="bg-purple-100 text-purple-800 mb-6">
            üöÄ –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ—Ü–µ—Å—Å
          </Badge>
          <h2 className="text-4xl font-bold text-gray-900 mb-6">
            –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç PREVENT?
          </h2>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            –û—Ç –ø–µ—Ä–≤–∏—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –¥–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ‚Äî –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–∞–±–æ—Ç—ã –æ –≤–∞—à–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
          </p>
        </div>

        {/* Journey Steps */}
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-20">
          {journeySteps.map((step, index) => {
            const IconComponent = step.icon;
            return (
              <Card key={index} className={`${step.bgColor} border-none hover:shadow-lg transition-all duration-300 hover:scale-105 relative group`}>
                <CardHeader className="pb-4">
                  <div className="flex items-center space-x-3 mb-3">
                    <span className="text-2xl">{step.step}</span>
                    <div className={`w-10 h-10 rounded-full bg-gradient-to-r ${step.color} flex items-center justify-center group-hover:scale-110 transition-transform duration-200`}>
                      <IconComponent className="w-5 h-5 text-white" />
                    </div>
                  </div>
                  <CardTitle className="text-lg font-bold text-gray-900 leading-tight">
                    {step.title}
                  </CardTitle>
                  <Badge variant="secondary" className="w-fit">
                    {step.subtitle}
                  </Badge>
                  <CardDescription className="text-gray-700 text-sm mt-2">
                    {step.description}
                  </CardDescription>
                </CardHeader>
                
                <CardContent>
                  <div className="space-y-2 mb-4">
                    {step.details.map((detail, detailIndex) => (
                      <div key={detailIndex} className="flex items-center space-x-2">
                        <div className="w-1.5 h-1.5 bg-gray-400 rounded-full"></div>
                        <span className="text-xs text-gray-600">{detail}</span>
                      </div>
                    ))}
                  </div>

                  <Button 
                    className={`w-full bg-gradient-to-r ${step.color} hover:opacity-90 text-white font-medium transition-all duration-200 hover:shadow-lg hover:scale-105`}
                    onClick={handleButtonClick(step.title, step.targetPath)}
                    aria-label={`${step.buttonText} - ${step.title}`}
                  >
                    {step.buttonText}
                    <ArrowRight className="w-4 h-4 ml-2" />
                  </Button>
                </CardContent>

                {/* Arrow for desktop */}
                {index < journeySteps.length - 1 && (
                  <div className="hidden lg:block absolute -right-4 top-1/2 transform -translate-y-1/2">
                    <ArrowRight className="w-8 h-8 text-gray-300" />
                  </div>
                )}
              </Card>
            );
          })}
        </div>

        {/* What you get */}
        <div className="text-center mb-12">
          <Badge className="bg-green-100 text-green-800 mb-6">
            ‚úÖ –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ
          </Badge>
          <h3 className="text-3xl font-bold text-gray-900 mb-8">
            –ü–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä –∑–∞–±–æ—Ç—ã –æ –∑–¥–æ—Ä–æ–≤—å–µ
          </h3>
        </div>

        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-16">
          {benefits.map((benefit, index) => (
            <Card key={index} className="bg-white hover:shadow-md transition-shadow border-green-100">
              <CardContent className="p-6">
                <div className="flex items-start space-x-3">
                  <CheckCircle className="w-6 h-6 text-green-600 flex-shrink-0 mt-1" />
                  <span className="text-gray-800 font-medium">{benefit}</span>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Process Flow Visualization for Mobile */}
        <div className="lg:hidden">
          <h4 className="text-xl font-bold text-center text-gray-900 mb-8">
            –í–∞—à –ø—É—Ç—å –∫ –∑–¥–æ—Ä–æ–≤—å—é
          </h4>
          <div className="space-y-4">
            {journeySteps.map((step, index) => (
              <div key={index} className="flex items-center space-x-4">
                <div className={`w-12 h-12 ${step.color.replace('from-', 'bg-').replace(' to-', '-').replace('-600', '-500').replace('-500', '')} rounded-full flex items-center justify-center shadow-md`}>
                  <step.icon className="w-6 h-6 text-white" />
                </div>
                <div className="flex-1">
                  <span className="text-base font-medium text-gray-800">{step.title}</span>
                  <p className="text-sm text-gray-600">{step.description}</p>
                  <Button 
                    size="sm"
                    className="mt-2 text-xs"
                    onClick={handleButtonClick(step.title, step.targetPath)}
                  >
                    {step.buttonText}
                  </Button>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>
  );
};

export default FeaturesGrid;
