
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  Brain, 
  Activity, 
  Heart, 
  Bell, 
  BarChart3, 
  Users, 
  Microscope,
  Smartphone,
  Calendar,
  Shield
} from "lucide-react";

const FeaturesGrid = () => {
  const featureMap = [
    {
      trigger: "–í—Ö–æ–¥–Ω–æ–π —Ç—Ä–∏–≥–≥–µ—Ä",
      description: "–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å, –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –ø–µ—Ä–µ—Ö–æ–¥, –æ–ø—ã—Ç –±–æ–ª–µ–∑–Ω–∏",
      icon: Bell,
      color: "from-red-500 to-pink-600",
      bgColor: "bg-red-50",
      items: ["–ê–Ω–∫–µ—Ç–∞ –∑–¥–æ—Ä–æ–≤—å—è", "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞", "–°–µ–º–µ–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è"]
    },
    {
      trigger: "–ê–Ω–∫–µ—Ç–∞ + –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
      description: "Apple Health, –≥–µ–Ω–µ—Ç–∏–∫–∞, –∞–Ω–∞–ª–∏–∑—ã",
      icon: Smartphone,
      color: "from-blue-500 to-cyan-600",
      bgColor: "bg-blue-50",
      items: ["Apple Health", "–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã", "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã"]
    },
    {
      trigger: "–ò–ò-–æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤",
      description: "–ú—É–ª—å—Ç–∏—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (—Ä–∞–∫, CVD, –Ω–µ–π—Ä–æ)",
      icon: Brain,
      color: "from-purple-500 to-indigo-600",
      bgColor: "bg-purple-50",
      items: ["–û–Ω–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏", "–°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–µ", "–ù–µ–π—Ä–æ–¥–µ–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ"]
    },
    {
      trigger: "–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π",
      description: "–ß–µ–∫–∞–ø—ã, –ø–∏—Ç–∞–Ω–∏–µ, —Å–æ–Ω, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å + –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏",
      icon: Calendar,
      color: "from-green-500 to-emerald-600",
      bgColor: "bg-green-50",
      items: ["–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —á–µ–∫–∞–ø—ã", "–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è", "–†–µ–∂–∏–º —Å–Ω–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"]
    },
    {
      trigger: "–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
      description: "–ù—É–¥–∂–∏, —Ç—Ä–µ–∫–µ—Ä—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –º–∏–∫—Ä–æ-–∫–æ–Ω—Ç–µ–Ω—Ç",
      icon: Activity,
      color: "from-orange-500 to-red-600",
      bgColor: "bg-orange-50",
      items: ["–£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "–¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–∏–≤—ã—á–µ–∫", "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"]
    },
    {
      trigger: "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
      description: "–î–∏–Ω–∞–º–∏–∫–∞ —Ä–∏—Å–∫–∞, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ/–ø–æ—Å–ª–µ",
      icon: BarChart3,
      color: "from-teal-500 to-blue-600",
      bgColor: "bg-teal-50",
      items: ["–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π", "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"]
    },
    {
      trigger: "–£—á–∞—Å—Ç–∏–µ –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö",
      description: "–ü—Ä–æ–¥–∞–∂–∞ –¥–∞–Ω–Ω—ã—Ö, —ç—Ç–∏—á–Ω—ã–π opt-in",
      icon: Microscope,
      color: "from-indigo-500 to-purple-600",
      bgColor: "bg-indigo-50",
      items: ["–ù–∞—É—á–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "–ê–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", "–≠—Ç–∏—á–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ"]
    },
    {
      trigger: "–≠–∫–æ—Å–∏—Å—Ç–µ–º–∞ PREVENT",
      description: "–ö–ª–∏–Ω–∏–∫–∏, –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏, –Ω—É—Ç—Ä–∏-–ø—Ä–æ–¥—É–∫—Ç—ã, –º–µ–¥–∏–π–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ",
      icon: Users,
      color: "from-pink-500 to-rose-600",
      bgColor: "bg-pink-50",
      items: ["–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –∫–ª–∏–Ω–∏–∫–∏", "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", "–°–æ–æ–±—â–µ—Å—Ç–≤–æ"]
    }
  ];

  return (
    <section className="py-20 px-4 md:px-6 bg-gradient-to-br from-gray-50 to-white">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-16">
          <Badge className="bg-purple-100 text-purple-800 mb-6">
            üöÄ –ö–∞—Ä—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
          </Badge>
          <h2 className="text-4xl font-bold text-gray-900 mb-6">
            –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç PREVENT?
          </h2>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            –û—Ç –ø–µ—Ä–≤–∏—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –¥–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ‚Äî –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã
          </p>
        </div>

        <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
          {featureMap.map((feature, index) => {
            const IconComponent = feature.icon;
            return (
              <Card key={index} className={`${feature.bgColor} border-none hover:shadow-lg transition-all duration-300 hover:scale-105`}>
                <CardHeader className="pb-4">
                  <div className={`w-12 h-12 rounded-full bg-gradient-to-r ${feature.color} flex items-center justify-center mb-4`}>
                    <IconComponent className="w-6 h-6 text-white" />
                  </div>
                  <CardTitle className="text-lg font-bold text-gray-900 leading-tight">
                    {feature.trigger}
                  </CardTitle>
                  <CardDescription className="text-gray-700 text-sm">
                    {feature.description}
                  </CardDescription>
                </CardHeader>
                
                <CardContent>
                  <div className="space-y-2">
                    {feature.items.map((item, itemIndex) => (
                      <div key={itemIndex} className="flex items-center space-x-2">
                        <div className="w-1.5 h-1.5 bg-gray-400 rounded-full"></div>
                        <span className="text-xs text-gray-600">{item}</span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>

        {/* Process Flow */}
        <div className="mt-20">
          <h3 className="text-2xl font-bold text-center text-gray-900 mb-12">
            –í–∞—à –ø—É—Ç—å –∫ –∑–¥–æ—Ä–æ–≤—å—é
          </h3>
          
          <div className="relative">
            {/* Desktop Flow */}
            <div className="hidden lg:flex items-center justify-between">
              {[
                { icon: Bell, text: "–û—Ü–µ–Ω–∫–∞", color: "bg-red-500" },
                { icon: Smartphone, text: "–î–∞–Ω–Ω—ã–µ", color: "bg-blue-500" },
                { icon: Brain, text: "–ò–ò-–∞–Ω–∞–ª–∏–∑", color: "bg-purple-500" },
                { icon: Calendar, text: "–ü–ª–∞–Ω", color: "bg-green-500" },
                { icon: BarChart3, text: "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", color: "bg-teal-500" }
              ].map((step, index) => (
                <div key={index} className="flex flex-col items-center">
                  <div className={`w-16 h-16 ${step.color} rounded-full flex items-center justify-center shadow-lg`}>
                    <step.icon className="w-8 h-8 text-white" />
                  </div>
                  <span className="mt-3 text-sm font-medium text-gray-700">{step.text}</span>
                  {index < 4 && (
                    <div className="absolute top-8 w-24 h-0.5 bg-gray-300" style={{left: `${(index + 1) * 20}%`}}></div>
                  )}
                </div>
              ))}
            </div>

            {/* Mobile Flow */}
            <div className="lg:hidden space-y-4">
              {[
                { icon: Bell, text: "–ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤", color: "bg-red-500" },
                { icon: Smartphone, text: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö", color: "bg-blue-500" },
                { icon: Brain, text: "–ò–ò-–∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–≥–Ω–æ–∑", color: "bg-purple-500" },
                { icon: Calendar, text: "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π", color: "bg-green-500" },
                { icon: BarChart3, text: "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", color: "bg-teal-500" }
              ].map((step, index) => (
                <div key={index} className="flex items-center space-x-4">
                  <div className={`w-12 h-12 ${step.color} rounded-full flex items-center justify-center shadow-md`}>
                    <step.icon className="w-6 h-6 text-white" />
                  </div>
                  <span className="text-base font-medium text-gray-800">{step.text}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default FeaturesGrid;
