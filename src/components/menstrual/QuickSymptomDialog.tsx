
import React, { useState } from 'react';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Slider } from '@/components/ui/slider';
import { useSymptomMoodLog } from '@/hooks/useSymptomMoodLog';
import { toast } from 'sonner';

interface QuickSymptomDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

const QuickSymptomDialog = ({ open, onOpenChange }: QuickSymptomDialogProps) => {
  const [selectedSymptoms, setSelectedSymptoms] = useState<string[]>([]);
  const [moodRating, setMoodRating] = useState<number[]>([5]);
  const [energyLevel, setEnergyLevel] = useState<number[]>([5]);
  const { addLog } = useSymptomMoodLog();

  const symptoms = [
    '–ë–æ–ª–∏ –≤–Ω–∏–∑—É –∂–∏–≤–æ—Ç–∞', '–ì–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å', '–£—Å—Ç–∞–ª–æ—Å—Ç—å', '–¢–æ—à–Ω–æ—Ç–∞',
    '–†–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–û—Ç–µ–∫–∏', '–ë–æ–ª—å –≤ –≥—Ä—É–¥–∏', '–°–æ–Ω–ª–∏–≤–æ—Å—Ç—å',
    '–ü–µ—Ä–µ–ø–∞–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è', '–í–∑–¥—É—Ç–∏–µ –∂–∏–≤–æ—Ç–∞', '–ë–æ–ª—å –≤ –ø–æ—è—Å–Ω–∏—Ü–µ',
    '–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –∞–ø–ø–µ—Ç–∏—Ç', '–ê–∫–Ω–µ', '–ì–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ'
  ];

  const toggleSymptom = (symptom: string) => {
    setSelectedSymptoms(prev => 
      prev.includes(symptom) 
        ? prev.filter(s => s !== symptom)
        : [...prev, symptom]
    );
  };

  const handleSubmit = async () => {
    try {
      await addLog({
        log_date: new Date().toISOString().split('T')[0],
        symptoms: selectedSymptoms,
        mood_rating: moodRating[0],
        energy_level: energyLevel[0]
      });
      
      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      setSelectedSymptoms([]);
      setMoodRating([5]);
      setEnergyLevel([5]);
      onOpenChange(false);
      
      toast.success('–°–∏–º–ø—Ç–æ–º—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∏–º–ø—Ç–æ–º–æ–≤');
    }
  };

  const getMoodEmoji = (rating: number) => {
    if (rating <= 2) return 'üò¢';
    if (rating <= 4) return 'üòê';
    if (rating <= 6) return 'üôÇ';
    if (rating <= 8) return 'üòä';
    return 'üòÑ';
  };

  const getEnergyEmoji = (rating: number) => {
    if (rating <= 2) return 'üò¥';
    if (rating <= 4) return 'üòë';
    if (rating <= 6) return 'üôÇ';
    if (rating <= 8) return 'üí™';
    return '‚ö°';
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="text-xl">–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ?</DialogTitle>
          <DialogDescription>
            –í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã –∏ –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-6 py-4">
          {/* –°–∏–º–ø—Ç–æ–º—ã */}
          <div>
            <h4 className="text-lg font-semibold mb-3 text-gray-800">–°–∏–º–ø—Ç–æ–º—ã</h4>
            <div className="flex flex-wrap gap-2">
              {symptoms.map((symptom) => (
                <Badge
                  key={symptom}
                  variant={selectedSymptoms.includes(symptom) ? "default" : "outline"}
                  className={`cursor-pointer transition-all duration-200 ${
                    selectedSymptoms.includes(symptom)
                      ? 'bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-md'
                      : 'border-purple-200 text-purple-700 hover:bg-purple-50'
                  }`}
                  onClick={() => toggleSymptom(symptom)}
                >
                  {symptom}
                </Badge>
              ))}
            </div>
          </div>

          {/* –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ */}
          <div>
            <h4 className="text-lg font-semibold mb-3 text-gray-800 flex items-center gap-2">
              –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ {getMoodEmoji(moodRating[0])}
            </h4>
            <div className="px-4">
              <Slider
                value={moodRating}
                onValueChange={setMoodRating}
                max={10}
                min={1}
                step={1}
                className="w-full"
              />
              <div className="flex justify-between text-sm text-gray-500 mt-2">
                <span>–ü–ª–æ—Ö–æ–µ</span>
                <span className="font-medium">{moodRating[0]}/10</span>
                <span>–û—Ç–ª–∏—á–Ω–æ–µ</span>
              </div>
            </div>
          </div>

          {/* –£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ */}
          <div>
            <h4 className="text-lg font-semibold mb-3 text-gray-800 flex items-center gap-2">
              –≠–Ω–µ—Ä–≥–∏—è {getEnergyEmoji(energyLevel[0])}
            </h4>
            <div className="px-4">
              <Slider
                value={energyLevel}
                onValueChange={setEnergyLevel}
                max={10}
                min={1}
                step={1}
                className="w-full"
              />
              <div className="flex justify-between text-sm text-gray-500 mt-2">
                <span>–ù–∏–∑–∫–∞—è</span>
                <span className="font-medium">{energyLevel[0]}/10</span>
                <span>–í—ã—Å–æ–∫–∞—è</span>
              </div>
            </div>
          </div>
        </div>

        <div className="flex gap-4 pt-4 border-t">
          <Button 
            onClick={handleSubmit} 
            className="flex-1 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
            disabled={selectedSymptoms.length === 0}
          >
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </Button>
          <Button 
            variant="outline" 
            onClick={() => onOpenChange(false)} 
            className="flex-1"
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default QuickSymptomDialog;
