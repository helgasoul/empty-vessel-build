/**
 * HTTP Client –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∂–µ–Ω—Å–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è Prevent
 * 
 * –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç —Å:
 * - üíñ –ó–∞–±–æ—Ç–ª–∏–≤—ã–º UX (loading states, error handling)
 * - üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é (—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
 * - üß¨ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º–∏ API
 * - ü§ñ –ü–æ–¥–¥–µ—Ä–∂–∫–æ–π –ò–ò-–∞–Ω–∞–ª–∏–∑–∞
 */

import { API_CONFIG, getApiUrl, getAuthHeaders, type APIEndpoint } from '../config/api';

// –¢–∏–ø—ã –¥–ª—è HTTP –∫–ª–∏–µ–Ω—Ç–∞
export interface ApiResponse<T = any> {
  data: T;
  success: boolean;
  message?: string;
  errors?: string[];
  metadata?: {
    timestamp: string;
    requestId: string;
    version: string;
  };
}

export interface ApiError {
  message: string;
  code?: string;
  details?: any;
  status?: number;
}

export interface RequestOptions {
  headers?: Record<string, string>;
  timeout?: number;
  retries?: number;
  cache?: boolean;
  encrypt?: boolean; // –î–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
}

// –ö–ª–∞—Å—Å HTTP –∫–ª–∏–µ–Ω—Ç–∞
export class PreventApiClient {
  private baseUrl: string;
  private defaultHeaders: Record<string, string>;
  private authToken?: string;
  
  constructor() {
    this.baseUrl = API_CONFIG.BASE_URL;
    this.defaultHeaders = API_CONFIG.DEFAULT_HEADERS;
  }
  
  // üîê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  setAuthToken(token: string) {
    this.authToken = token;
  }
  
  // üîì –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  clearAuthToken() {
    this.authToken = undefined;
  }
  
  // üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
  private logRequest(method: string, url: string, data?: any) {
    if (API_CONFIG.ENVIRONMENTS.development?.DEBUG) {
      console.log(`üå∏ API Request: ${method.toUpperCase()} ${url}`, data);
    }
  }
  
  // üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
  private logResponse(url: string, response: any) {
    if (API_CONFIG.ENVIRONMENTS.development?.DEBUG) {
      console.log(`üíï API Response: ${url}`, response);
    }
  }
  
  // ‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –∑–∞–±–æ—Ç–ª–∏–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  private handleError(error: any, url: string): ApiError {
    this.logResponse(url, error);
    
    const friendlyMessages: Record<number, string> = {
      400: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
      401: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É',
      403: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏',
      404: '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
      429: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
      500: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –º—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º',
      503: '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
    };
    
    const status = error.response?.status || 0;
    const message = friendlyMessages[status] || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞';
    
    return {
      message,
      code: error.code,
      status,
      details: error.response?.data,
    };
  }
  
  // üîÑ Retry –ª–æ–≥–∏–∫–∞ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
  private async retryRequest<T>(
    requestFn: () => Promise<T>,
    options: RequestOptions = {}
  ): Promise<T> {
    const maxAttempts = options.retries || API_CONFIG.RETRY.MAX_ATTEMPTS;
    let lastError: any;
    
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        return await requestFn();
      } catch (error) {
        lastError = error;
        
        if (attempt === maxAttempts) {
          throw error;
        }
        
        // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        const delay = Math.min(
          API_CONFIG.RETRY.BASE_DELAY * Math.pow(2, attempt - 1),
          API_CONFIG.RETRY.MAX_DELAY
        );
        
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
    
    throw lastError;
  }
  
  // üåê –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
  private async request<T>(
    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH',
    endpoint: APIEndpoint | string,
    data?: any,
    options: RequestOptions = {}
  ): Promise<ApiResponse<T>> {
    const url = typeof endpoint === 'string' ? endpoint : getApiUrl(endpoint);
    const headers = {
      ...this.defaultHeaders,
      ...getAuthHeaders(this.authToken),
      ...options.headers,
    };
    
    this.logRequest(method, url, data);
    
    const requestFn = async () => {
      const response = await fetch(url, {
        method,
        headers,
        body: data ? JSON.stringify(data) : undefined,
        signal: options.timeout ? AbortSignal.timeout(options.timeout) : undefined,
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      this.logResponse(url, result);
      return result;
    };
    
    try {
      return await this.retryRequest(requestFn, options);
    } catch (error) {
      throw this.handleError(error, url);
    }
  }
  
  // GET –∑–∞–ø—Ä–æ—Å
  async get<T>(endpoint: APIEndpoint | string, options?: RequestOptions): Promise<ApiResponse<T>> {
    return this.request<T>('GET', endpoint, undefined, options);
  }
  
  // POST –∑–∞–ø—Ä–æ—Å
  async post<T>(endpoint: APIEndpoint | string, data?: any, options?: RequestOptions): Promise<ApiResponse<T>> {
    return this.request<T>('POST', endpoint, data, options);
  }
  
  // PUT –∑–∞–ø—Ä–æ—Å
  async put<T>(endpoint: APIEndpoint | string, data?: any, options?: RequestOptions): Promise<ApiResponse<T>> {
    return this.request<T>('PUT', endpoint, data, options);
  }
  
  // PATCH –∑–∞–ø—Ä–æ—Å
  async patch<T>(endpoint: APIEndpoint | string, data?: any, options?: RequestOptions): Promise<ApiResponse<T>> {
    return this.request<T>('PATCH', endpoint, data, options);
  }
  
  // DELETE –∑–∞–ø—Ä–æ—Å
  async delete<T>(endpoint: APIEndpoint | string, options?: RequestOptions): Promise<ApiResponse<T>> {
    return this.request<T>('DELETE', endpoint, undefined, options);
  }
  
  // üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ (–¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
  async uploadFile<T>(
    endpoint: APIEndpoint | string,
    file: File,
    additionalData?: Record<string, any>,
    options?: RequestOptions
  ): Promise<ApiResponse<T>> {
    const url = typeof endpoint === 'string' ? endpoint : getApiUrl(endpoint);
    const formData = new FormData();
    formData.append('file', file);
    
    if (additionalData) {
      Object.entries(additionalData).forEach(([key, value]) => {
        formData.append(key, JSON.stringify(value));
      });
    }
    
    const headers = {
      ...getAuthHeaders(this.authToken),
      ...options?.headers,
      // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type –¥–ª—è FormData
    };
    delete headers['Content-Type'];
    
    this.logRequest('POST', url, { file: file.name, ...additionalData });
    
    try {
      const response = await fetch(url, {
        method: 'POST',
        headers,
        body: formData,
        signal: options?.timeout ? AbortSignal.timeout(options.timeout) : undefined,
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      this.logResponse(url, result);
      return result;
    } catch (error) {
      throw this.handleError(error, url);
    }
  }
  
  // üíé –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è Enhanced Gail Calculator
  
  // üßÆ –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –ø–æ –º–æ–¥–µ–ª–∏ Gail
  async calculateGailRisk(data: any): Promise<ApiResponse<any>> {
    return this.post('GAIL_CALCULATOR', data, { encrypt: true });
  }
  
  // üß¨ –ê–Ω–∞–ª–∏–∑ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  async analyzeGeneticData(data: any): Promise<ApiResponse<any>> {
    return this.post('GENETIC_ANALYSIS', data, { encrypt: true });
  }
  
  // ü§ñ –ò–ò-–∞–Ω–∞–ª–∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  async analyzemedicalImage(file: File, metadata?: any): Promise<ApiResponse<any>> {
    return this.uploadFile('MEDICAL_IMAGE_ANALYSIS', file, metadata, { encrypt: true });
  }
  
  // üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  async getPersonalizedRecommendations(userId: string): Promise<ApiResponse<any>> {
    return this.get(`USER_PROFILE/${userId}/recommendations`);
  }
  
  // üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –Ω–æ—Å–∏–º—ã–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
  async syncWearableData(deviceType: string, data: any): Promise<ApiResponse<any>> {
    return this.post(`WEARABLES/${deviceType}/sync`, data);
  }
}

// Singleton instance
export const apiClient = new PreventApiClient();

// –•—É–∫–∏ –¥–ª—è React Query / SWR –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
export const createApiQueryKey = (endpoint: APIEndpoint | string, params?: any) => {
  return [endpoint, params].filter(Boolean);
};

// –¢–∏–ø—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
export type { ApiResponse, ApiError, RequestOptions };
