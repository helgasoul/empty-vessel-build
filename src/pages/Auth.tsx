
import React, { useState, useEffect } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Badge } from '@/components/ui/badge';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { toast } from 'sonner';
import { supabase } from '@/integrations/supabase/client';
import { UserRole, UserRoleEnum } from '@/types/user';
import { 
  User, 
  Stethoscope, 
  Settings, 
  Building2, 
  FlaskConical,
  CheckCircle,
  AlertCircle,
  Crown,
  Shield,
  ArrowLeft
} from 'lucide-react';
import AuthHeader from '@/components/auth/AuthHeader';
import PasswordUpdateForm from '@/components/auth/PasswordUpdateForm';

const Auth = () => {
  const [isLogin, setIsLogin] = useState(true);
  const [selectedRole, setSelectedRole] = useState<UserRole>('patient');
  const [adminCode, setAdminCode] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isResetLoading, setIsResetLoading] = useState(false);
  const [resetDialogOpen, setResetDialogOpen] = useState(false);
  const { signIn, signUp, user } = useAuth();
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    fullName: '',
    confirmPassword: ''
  });

  // Check if this is a password reset flow
  const type = searchParams.get('type');
  const accessToken = searchParams.get('access_token');
  const refreshToken = searchParams.get('refresh_token');

  // Handle password reset flow
  useEffect(() => {
    if (type === 'recovery' && accessToken && refreshToken) {
      supabase.auth.setSession({
        access_token: accessToken,
        refresh_token: refreshToken
      }).then(({ error }) => {
        if (error) {
          console.error('Error setting session:', error);
          toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è');
        } else {
          toast.success('–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –ø–∞—Ä–æ–ª—å');
        }
      });
    }
  }, [type, accessToken, refreshToken]);

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
  useEffect(() => {
    if (user && type !== 'recovery') {
      navigate('/');
    }
  }, [user, navigate, type]);

  // ‚úÖ –ü–û–õ–ù–´–ô —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π
  const roleOptions = [
    {
      value: 'patient' as UserRole,
      label: '–ü–∞—Ü–∏–µ–Ω—Ç',
      description: '–•–æ—á—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º –∑–¥–æ—Ä–æ–≤—å–µ–º',
      icon: User,
      color: 'bg-blue-500',
      hoverColor: 'hover:bg-blue-600',
      textColor: 'text-white',
      borderColor: 'border-blue-500',
      bgGradient: 'from-blue-50 to-cyan-50',
      iconBg: 'bg-blue-100',
      iconColor: 'text-blue-600'
    },
    {
      value: 'doctor' as UserRole,
      label: '–í—Ä–∞—á',
      description: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
      icon: Stethoscope,
      color: 'bg-green-500',
      hoverColor: 'hover:bg-green-600',
      textColor: 'text-white',
      borderColor: 'border-green-500',
      bgGradient: 'from-green-50 to-emerald-50',
      iconBg: 'bg-green-100',
      iconColor: 'text-green-600'
    },
    {
      value: 'admin' as UserRole,
      label: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π',
      icon: Crown,
      color: 'bg-red-500',
      hoverColor: 'hover:bg-red-600',
      textColor: 'text-white',
      borderColor: 'border-red-500',
      bgGradient: 'from-red-50 to-rose-50',
      iconBg: 'bg-red-100',
      iconColor: 'text-red-600',
      requiresCode: true
    },
    {
      value: 'clinic' as UserRole,
      label: '–ö–ª–∏–Ω–∏–∫–∞',
      description: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ',
      icon: Building2,
      color: 'bg-purple-500',
      hoverColor: 'hover:bg-purple-600',
      textColor: 'text-white',
      borderColor: 'border-purple-500',
      bgGradient: 'from-purple-50 to-violet-50',
      iconBg: 'bg-purple-100',
      iconColor: 'text-purple-600'
    },
    {
      value: 'laboratory' as UserRole,
      label: '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è',
      description: '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
      icon: FlaskConical,
      color: 'bg-orange-500',
      hoverColor: 'hover:bg-orange-600',
      textColor: 'text-white',
      borderColor: 'border-orange-500',
      bgGradient: 'from-orange-50 to-amber-50',
      iconBg: 'bg-orange-100',
      iconColor: 'text-orange-600'
    }
  ];

  const handleRoleChange = (value: string) => {
    console.log('üîÑ –†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:', value);
    setSelectedRole(value as UserRole);
    setError('');
  };

  const validateForm = () => {
    if (!isLogin) {
      if (!formData.fullName.trim()) {
        setError('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è');
        return false;
      }
      if (formData.password !== formData.confirmPassword) {
        setError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
        return false;
      }
      if (selectedRole === 'admin' && !adminCode.trim()) {
        setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return false;
      }
      if (selectedRole === 'admin' && adminCode !== 'PREVENT_ADMIN_2024') {
        setError('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return false;
      }
    }
    
    if (!formData.email.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ email');
      return false;
    }
    if (!formData.password.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
      return false;
    }
    
    return true;
  };

  const handleSignIn = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');

    try {
      console.log('–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è:', formData.email);

      if (!formData.email || !formData.password) {
        setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        setIsLoading(false);
        return;
      }

      const { error } = await signIn(formData.email, formData.password);

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ';
        
        if (error.message === 'Invalid login credentials') {
          errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
        } else if (error.message.includes('Email not confirmed')) {
          errorMessage = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å';
        } else if (error.message.includes('Too many requests')) {
          errorMessage = '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
        } else {
          errorMessage = error.message;
        }
        
        setError(errorMessage);
      } else {
        toast.success('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PREVENT!');
        console.log('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É');
      }
    } catch (err) {
      console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞');
    } finally {
      setIsLoading(false);
    }
  };

  const handleSignUp = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');

    console.log('üìù –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', {
      email: formData.email,
      fullName: formData.fullName,
      selectedRole,
      hasAdminCode: !!adminCode
    });

    if (!validateForm()) {
      setIsLoading(false);
      return;
    }

    try {
      if (formData.password.length < 6) {
        setError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
        setIsLoading(false);
        return;
      }

      const { error } = await signUp(formData.email, formData.password, formData.fullName);

      if (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
        
        if (error.message === 'User already registered') {
          errorMessage = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω';
        } else if (error.message.includes('Password should be at least')) {
          errorMessage = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤';
        } else if (error.message.includes('Invalid email')) {
          errorMessage = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å';
        } else {
          errorMessage = error.message;
        }
        
        setError(errorMessage);
      } else {
        console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å —Ä–æ–ª—å—é:', selectedRole);
        toast.success('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞');
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        switch (selectedRole) {
          case 'admin':
            navigate('/admin-dashboard');
            break;
          case 'doctor':
            navigate('/doctor-dashboard');
            break;
          default:
            navigate('/');
        }
      }
    } catch (err) {
      console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞');
    } finally {
      setIsLoading(false);
    }
  };

  const handlePasswordReset = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsResetLoading(true);

    try {
      const formData = new FormData(e.currentTarget);
      const email = formData.get('resetEmail') as string;

      if (!email) {
        toast.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email –∞–¥—Ä–µ—Å');
        setIsResetLoading(false);
        return;
      }

      console.log('Sending password reset request for:', email);

      const response = await supabase.functions.invoke('send-password-reset', {
        body: { email }
      });

      console.log('Password reset response:', response);

      if (response.error) {
        console.error('Error sending password reset:', response.error);
        toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      } else if (response.data) {
        if (response.data.testMode) {
          toast.success('–í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø–∏—Å—å–º–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π email. –°—Å—ã–ª–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ.');
          console.log('Test mode reset link:', response.data.resetLink);
        } else {
          toast.success('–ü–∏—Å—å–º–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à email');
        }
        setResetDialogOpen(false);
        (e.target as HTMLFormElement).reset();
      }
    } catch (err) {
      console.error('Unexpected error:', err);
      toast.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsResetLoading(false);
    }
  };

  const handlePasswordUpdate = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      const formData = new FormData(e.currentTarget);
      const password = formData.get('newPassword') as string;
      const confirmPassword = formData.get('confirmPassword') as string;

      if (!password || !confirmPassword) {
        toast.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        setIsLoading(false);
        return;
      }

      if (password !== confirmPassword) {
        toast.error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
        setIsLoading(false);
        return;
      }

      if (password.length < 6) {
        toast.error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
        setIsLoading(false);
        return;
      }

      const { error } = await supabase.auth.updateUser({
        password: password
      });

      if (error) {
        console.error('Error updating password:', error);
        toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è');
      } else {
        toast.success('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
        navigate('/');
      }
    } catch (err) {
      console.error('Unexpected error:', err);
      toast.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞');
    } finally {
      setIsLoading(false);
    }
  };

  // If this is a password recovery flow, show password update form
  if (type === 'recovery' && user) {
    return (
      <PasswordUpdateForm
        onSubmit={handlePasswordUpdate}
        isLoading={isLoading}
      />
    );
  }

  return (
    <div className="min-h-screen prevent-gradient-bg flex items-center justify-center p-4">
      <div className="w-full max-w-2xl animate-fade-in">
        <AuthHeader />

        <Card className="prevent-card">
          <CardHeader className="text-center">
            <CardTitle className="text-2xl font-montserrat">
              {isLogin ? '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PREVENT' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ PREVENT'}
            </CardTitle>
            <CardDescription className="font-roboto">
              –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-3 flex items-center space-x-2 text-red-800">
                <AlertCircle className="w-4 h-4" />
                <span className="text-sm">{error}</span>
              </div>
            )}

            <form onSubmit={isLogin ? handleSignIn : handleSignUp} className="space-y-6">
              {!isLogin && (
                <div className="space-y-2">
                  <Label htmlFor="fullName" className="font-roboto">–ü–æ–ª–Ω–æ–µ –∏–º—è</Label>
                  <Input
                    id="fullName"
                    value={formData.fullName}
                    onChange={(e) => setFormData({...formData, fullName: e.target.value})}
                    placeholder="–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞"
                    required={!isLogin}
                    className="font-roboto"
                    disabled={isLoading}
                  />
                </div>
              )}
              
              <div className="space-y-2">
                <Label htmlFor="email" className="font-roboto">Email</Label>
                <Input
                  id="email"
                  type="email"
                  value={formData.email}
                  onChange={(e) => setFormData({...formData, email: e.target.value})}
                  placeholder="your@email.com"
                  required
                  className="font-roboto"
                  disabled={isLoading}
                />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="password" className="font-roboto">–ü–∞—Ä–æ–ª—å</Label>
                <Input
                  id="password"
                  type="password"
                  value={formData.password}
                  onChange={(e) => setFormData({...formData, password: e.target.value})}
                  placeholder={isLogin ? "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" : "–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"}
                  required
                  className="font-roboto"
                  disabled={isLoading}
                  minLength={isLogin ? undefined : 6}
                />
              </div>

              {!isLogin && (
                <>
                  <div className="space-y-2">
                    <Label htmlFor="confirmPassword" className="font-roboto">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</Label>
                    <Input
                      id="confirmPassword"
                      type="password"
                      value={formData.confirmPassword}
                      onChange={(e) => setFormData({...formData, confirmPassword: e.target.value})}
                      placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                      required
                      className="font-roboto"
                      disabled={isLoading}
                      minLength={6}
                    />
                  </div>

                  <div className="space-y-4">
                    <div className="text-center">
                      <Label className="text-xl font-bold text-gray-900 mb-2 block">
                        –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
                      </Label>
                      <p className="text-sm text-gray-600 mb-4">
                        –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∞—à–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
                      </p>
                    </div>
                    
                    {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                    <div className="text-xs text-gray-500 bg-gray-50 p-2 rounded">
                      –í—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å: {selectedRole} | –í—Å–µ–≥–æ —Ä–æ–ª–µ–π: {roleOptions.length}
                    </div>
                    
                    <RadioGroup 
                      value={selectedRole} 
                      onValueChange={handleRoleChange}
                      className="grid grid-cols-1 md:grid-cols-2 gap-4"
                    >
                      {roleOptions.map((option) => (
                        <div key={option.value} className="relative">
                          <RadioGroupItem 
                            value={option.value} 
                            id={option.value} 
                            className="sr-only"
                          />
                          <Label 
                            htmlFor={option.value} 
                            className={`
                              group flex flex-col items-center p-6 rounded-xl border-2 cursor-pointer transition-all duration-300
                              ${selectedRole === option.value 
                                ? `${option.borderColor} bg-gradient-to-br ${option.bgGradient} shadow-lg scale-105` 
                                : 'border-gray-200 hover:border-gray-300 hover:shadow-md hover:scale-102'
                              }
                            `}
                          >
                            <div className={`
                              w-16 h-16 rounded-full flex items-center justify-center mb-4 transition-all duration-300
                              ${selectedRole === option.value 
                                ? `${option.color} ${option.textColor} shadow-lg` 
                                : `${option.iconBg} group-hover:scale-110`
                              }
                            `}>
                              <option.icon className={`
                                w-8 h-8 transition-all duration-300
                                ${selectedRole === option.value 
                                  ? option.textColor 
                                  : option.iconColor
                                }
                              `} />
                            </div>
                            
                            <div className="text-center">
                              <div className={`
                                font-bold text-lg mb-2 transition-colors duration-300
                                ${selectedRole === option.value 
                                  ? 'text-gray-900' 
                                  : 'text-gray-700 group-hover:text-gray-900'
                                }
                              `}>
                                {option.label}
                              </div>
                              <div className="text-sm text-gray-600 mb-3">
                                {option.description}
                              </div>
                            </div>
                            
                            {selectedRole === option.value && (
                              <div className="absolute -top-2 -right-2">
                                <div className={`
                                  w-8 h-8 rounded-full flex items-center justify-center
                                  ${option.color} ${option.textColor} shadow-lg animate-scale-in
                                `}>
                                  <CheckCircle className="w-5 h-5" />
                                </div>
                              </div>
                            )}
                            
                            {option.requiresCode && (
                              <div className="absolute top-2 left-2">
                                <div className="bg-red-500 text-white text-xs px-2 py-1 rounded-full font-medium shadow">
                                  –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞
                                </div>
                              </div>
                            )}
                          </Label>
                        </div>
                      ))}
                    </RadioGroup>

                    {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ */}
                    {selectedRole === 'admin' && (
                      <div className="space-y-3 p-4 bg-red-50 border border-red-200 rounded-lg">
                        <div className="flex items-center space-x-2">
                          <Crown className="w-5 h-5 text-red-600" />
                          <Label htmlFor="adminCode" className="font-roboto font-semibold text-red-800">
                            –ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                          </Label>
                        </div>
                        <Input
                          id="adminCode"
                          type="password"
                          placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                          value={adminCode}
                          onChange={(e) => setAdminCode(e.target.value)}
                          required
                          className="font-roboto border-red-300 focus:border-red-500"
                          disabled={isLoading}
                        />
                        <p className="text-xs text-red-600">
                          –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞
                        </p>
                      </div>
                    )}
                  </div>
                </>
              )}

              <Button 
                type="submit" 
                className="w-full prevent-button-primary text-lg py-3"
                disabled={isLoading}
              >
                {isLoading ? (isLogin ? '–í—Ö–æ–¥...' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...') : (isLogin ? '–í–æ–π—Ç–∏' : '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç')}
              </Button>
            </form>

            <div className="text-center">
              <button
                type="button"
                onClick={() => {
                  setIsLogin(!isLogin);
                  setError('');
                  setSelectedRole('patient');
                  setAdminCode('');
                  setFormData({
                    email: '',
                    password: '',
                    fullName: '',
                    confirmPassword: ''
                  });
                }}
                className="text-purple-600 hover:text-purple-700 text-sm font-medium"
              >
                {isLogin ? '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å' : '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π–¥–∏—Ç–µ'}
              </button>
            </div>

            {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
            <div className="bg-gray-50 p-3 rounded-lg text-xs text-gray-600">
              <div><strong>Debug info:</strong></div>
              <div>–†–µ–∂–∏–º: {isLogin ? '–í—Ö–æ–¥' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}</div>
              <div>–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–æ–ª—å: {selectedRole}</div>
              <div>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: {roleOptions.map(r => r.value).join(', ')}</div>
              {selectedRole === 'admin' && (
                <div>–ö–æ–¥ –∞–¥–º–∏–Ω–∞ –≤–≤–µ–¥–µ–Ω: {adminCode ? '–î–∞' : '–ù–µ—Ç'}</div>
              )}
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ */}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
              <div className="flex items-start space-x-2">
                <AlertCircle className="w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0" />
                <div className="text-xs text-blue-800">
                  <p className="font-medium mb-1">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</p>
                  <p>–ï—Å–ª–∏ —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å –≤—Ö–æ–¥–æ–º, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ email –∏ –ø–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.</p>
                  {selectedRole === 'admin' && (
                    <p className="mt-1 font-medium">–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: PREVENT_ADMIN_2024</p>
                  )}
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default Auth;
