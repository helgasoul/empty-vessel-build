/**
 * Enhanced Gail Calculator API Service
 * 
 * –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º Gail
 * üßÆ –ú–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
 * üß¨ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 * ü§ñ –ò–ò-–∞–Ω–∞–ª–∏–∑ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
 * üíñ –ó–∞–±–æ—Ç–ª–∏–≤—ã–π UX –¥–ª—è –∂–µ–Ω—â–∏–Ω
 */

import { apiClient, type ApiResponse } from './http-client';
import type {
  GailCalculatorInput,
  GailCalculatorResult,
  EnhancedRiskAssessment,
  GeneticRiskFactors,
  EnvironmentalFactors,
  LifestyleFactors,
  PersonalizedRecommendations,
} from '../types/gail-calculator';

export class EnhancedGailCalculatorService {
  
  // üßÆ –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –ø–æ –º–æ–¥–µ–ª–∏ Gail
  async calculateRisk(input: GailCalculatorInput): Promise<ApiResponse<GailCalculatorResult>> {
    try {
      const response = await apiClient.calculateGailRisk({
        personalInfo: input.personalInfo,
        medicalHistory: input.medicalHistory,
        familyHistory: input.familyHistory,
        lifestyle: input.lifestyle,
        timestamp: new Date().toISOString(),
      });
      
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤ Gail:', error);
      throw error;
    }
  }
  
  // üß¨ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  async calculateEnhancedRisk(
    input: GailCalculatorInput,
    geneticData?: GeneticRiskFactors,
    environmentalData?: EnvironmentalFactors
  ): Promise<ApiResponse<EnhancedRiskAssessment>> {
    try {
      const enhancedInput = {
        ...input,
        genetic: geneticData,
        environmental: environmentalData,
        enhancedAnalysis: true,
        analysisType: 'comprehensive',
      };
      
      const response = await apiClient.post('MULTI_FACTOR_ANALYSIS', enhancedInput, {
        encrypt: true,
        timeout: 60000, // 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      });
      
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤:', error);
      throw error;
    }
  }
  
  // ü§ñ –ò–ò-–∞–Ω–∞–ª–∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤
  async analyzemedicalImages(
    files: File[],
    patientId: string,
    imageType: 'mammography' | 'ultrasound' | 'mri' | 'ct'
  ): Promise<ApiResponse<any>> {
    try {
      const analysisPromises = files.map(file => 
        apiClient.analyzemedicalImage(file, {
          patientId,
          imageType,
          timestamp: new Date().toISOString(),
          source: 'gail-calculator',
        })
      );
      
      const results = await Promise.all(analysisPromises);
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
      const combinedAnalysis = {
        imageCount: files.length,
        results: results.map(r => r.data),
        overallRisk: this.calculateCombinedImageRisk(results),
        recommendations: this.generateImageBasedRecommendations(results),
      };
      
      return {
        data: combinedAnalysis,
        success: true,
        message: '–ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω',
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
      throw error;
    }
  }
  
  // üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  async getPersonalizedRecommendations(
    userId: string,
    riskProfile: EnhancedRiskAssessment
  ): Promise<ApiResponse<PersonalizedRecommendations>> {
    try {
      const response = await apiClient.post('RECOMMENDATIONS', {
        userId,
        riskProfile,
        recommendationType: 'comprehensive',
        includeLifestyle: true,
        includeScreening: true,
        includeNutrition: true,
        includeExercise: true,
        timeHorizon: '5years',
      });
      
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
      throw error;
    }
  }
  
  // üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∏—Å–∫–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
  async trackRiskChanges(
    userId: string,
    timeRange: '6months' | '1year' | '2years' | '5years' = '1year'
  ): Promise<ApiResponse<any>> {
    try {
      const response = await apiClient.get(`MONITORING/${userId}/risk-trends`, {
        headers: {
          'X-Time-Range': timeRange,
        },
      });
      
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∏—Å–∫–æ–≤:', error);
      throw error;
    }
  }
  
  // üß¨ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  async uploadGeneticData(
    file: File,
    userId: string,
    source: 'genotek' | 'genetico' | '23andme' | 'ancestryDNA' | 'other'
  ): Promise<ApiResponse<GeneticRiskFactors>> {
    try {
      const response = await apiClient.uploadFile('GENETIC_UPLOAD', file, {
        userId,
        source,
        dataType: 'raw-genetics',
        analysisType: 'breast-cancer-risk',
        timestamp: new Date().toISOString(),
      });
      
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }
  
  // üåç –ê–Ω–∞–ª–∏–∑ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞
  async analyzeEnvironmentalFactors(
    location: { latitude: number; longitude: number },
    userId: string
  ): Promise<ApiResponse<EnvironmentalFactors>> {
    try {
      const response = await apiClient.post('ENVIRONMENTAL_ANALYSIS', {
        userId,
        location,
        analysisTypes: [
          'air_quality',
          'uv_exposure',
          'water_quality',
          'environmental_toxins',
          'climate_factors',
        ],
        timeRange: '1year',
      });
      
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤:', error);
      throw error;
    }
  }
  
  // üì± –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –Ω–æ—Å–∏–º—ã–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
  async syncWearableData(
    userId: string,
    deviceType: 'apple_health' | 'google_fit' | 'fitbit' | 'oura' | 'whoop',
    data: any
  ): Promise<ApiResponse<LifestyleFactors>> {
    try {
      const response = await apiClient.syncWearableData(deviceType, {
        userId,
        data,
        analysisType: 'lifestyle-risk-factors',
        includeMetrics: [
          'sleep_quality',
          'physical_activity',
          'heart_rate_variability',
          'stress_levels',
          'menstrual_cycle',
        ],
      });
      
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –Ω–æ—Å–∏–º—ã–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏:', error);
      throw error;
    }
  }
  
  // üìà –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  async createMonitoringPlan(
    userId: string,
    riskProfile: EnhancedRiskAssessment,
    preferences: {
      screeningFrequency: 'standard' | 'enhanced' | 'high-risk';
      lifestyleGoals: string[];
      notificationPreferences: any;
    }
  ): Promise<ApiResponse<any>> {
    try {
      const response = await apiClient.post('LIFESTYLE_PLAN', {
        userId,
        riskProfile,
        preferences,
        planType: 'comprehensive',
        duration: '12months',
        includeReminders: true,
        includeEducation: true,
      });
      
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
      throw error;
    }
  }
  
  // üéØ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  
  private calculateCombinedImageRisk(results: any[]): number {
    // –õ–æ–≥–∏–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const riskScores = results
      .map(r => r.data?.riskScore || 0)
      .filter(score => score > 0);
    
    if (riskScores.length === 0) return 0;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫, –Ω–æ —É—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    const maxRisk = Math.max(...riskScores);
    const avgRisk = riskScores.reduce((a, b) => a + b) / riskScores.length;
    
    // –í–∑–≤–µ—à–µ–Ω–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∏—Å–∫–∞
    return Math.round((maxRisk * 0.7 + avgRisk * 0.3) * 100) / 100;
  }
  
  private generateImageBasedRecommendations(results: any[]): string[] {
    const recommendations: string[] = [];
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    results.forEach(result => {
      const data = result.data;
      if (data?.findings?.suspicious) {
        recommendations.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –æ–Ω–∫–æ–ª–æ–≥–æ–º');
      }
      if (data?.density === 'high') {
        recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞ (–£–ó–ò, –ú–†–¢)');
      }
      if (data?.calcifications) {
        recommendations.push('–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∫–∞–ª—å—Ü–∏–Ω–∞—Ç–∞–º–∏');
      }
    });
    
    return [...new Set(recommendations)]; // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  }
  
  // üìä –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  validateInput(input: GailCalculatorInput): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!input.personalInfo.age || input.personalInfo.age < 35 || input.personalInfo.age > 85) {
      errors.push('–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 35 –¥–æ 85 –ª–µ—Ç');
    }
    
    if (!input.personalInfo.race) {
      errors.push('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —ç—Ç–Ω–∏—á–µ—Å–∫—É—é –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏
    if (input.medicalHistory.ageAtMenarche && (input.medicalHistory.ageAtMenarche < 8 || input.medicalHistory.ageAtMenarche > 17)) {
      errors.push('–í–æ–∑—Ä–∞—Å—Ç –º–µ–Ω–∞—Ä—Ö–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 8 –¥–æ 17 –ª–µ—Ç');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–º–µ–π–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
    if (input.familyHistory.breastCancerRelatives < 0) {
      errors.push('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ —Å —Ä–∞–∫–æ–º –º–æ–ª–æ—á–Ω–æ–π –∂–µ–ª–µ–∑—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º');
    }
    
    return {
      isValid: errors.length === 0,
      errors,
    };
  }
}

// Singleton instance
export const enhancedGailService = new EnhancedGailCalculatorService();

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export type {
  GailCalculatorInput,
  GailCalculatorResult,
  EnhancedRiskAssessment,
  GeneticRiskFactors,
  EnvironmentalFactors,
  LifestyleFactors,
  PersonalizedRecommendations,
};
