
import { useState, useCallback, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';

interface Recommendation {
  id: string;
  type: 'lifestyle' | 'medical' | 'nutrition' | 'exercise' | 'monitoring';
  priority: 'high' | 'medium' | 'low';
  title: string;
  description: string;
  rationale: string;
  timeline: string;
  actionable_steps: string[];
  related_findings: string[];
  confidence_level: number;
  is_completed: boolean;
  created_at: string;
}

interface RecommendationFilters {
  type?: string;
  priority?: string;
  completed?: boolean;
}

interface UsePersonalizedRecommendationsReturn {
  recommendations: Recommendation[];
  filteredRecommendations: Recommendation[];
  isLoading: boolean;
  error: string | null;
  
  refreshRecommendations: () => Promise<void>;
  markAsCompleted: (recommendationId: string) => Promise<boolean>;
  dismissRecommendation: (recommendationId: string) => Promise<boolean>;
  applyFilters: (filters: RecommendationFilters) => void;
  
  // Analytics
  stats: {
    total: number;
    completed: number;
    high_priority: number;
    completion_rate: number;
  };
  
  // Utilities
  hasRecommendations: boolean;
  hasHighPriorityRecommendations: boolean;
  
  utils: {
    groupByType: () => Record<string, Recommendation[]>;
    groupByPriority: () => Record<string, Recommendation[]>;
    getTypeIcon: (type: string) => string;
    getPriorityColor: (priority: string) => string;
    formatTimeline: (timeline: string) => string;
  };
}

export const usePersonalizedRecommendations = (): UsePersonalizedRecommendationsReturn => {
  const { user } = useAuth();
  const [recommendations, setRecommendations] = useState<Recommendation[]>([]);
  const [filteredRecommendations, setFilteredRecommendations] = useState<Recommendation[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [filters, setFilters] = useState<RecommendationFilters>({});

  // Load recommendations on mount
  useEffect(() => {
    if (user) {
      refreshRecommendations();
    }
  }, [user]);

  // Apply filters when recommendations or filters change
  useEffect(() => {
    applyFiltersInternal();
  }, [recommendations, filters]);

  const refreshRecommendations = useCallback(async () => {
    if (!user) return;

    try {
      setIsLoading(true);
      setError(null);

      // In a real implementation, this would call your AI recommendation service
      // For now, we'll generate mock recommendations based on user data
      const mockRecommendations: Recommendation[] = [
        {
          id: '1',
          type: 'medical',
          priority: 'high',
          title: '–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –º–∞–º–º–æ–≥—Ä–∞—Ñ–∏—é',
          description: '–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ —Å–µ–º–µ–π–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏ –º–∞–º–º–æ–≥—Ä–∞—Ñ–∏—é.',
          rationale: '–°–µ–º–µ–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Ä–∞–∫–∞ –º–æ–ª–æ—á–Ω–æ–π –∂–µ–ª–µ–∑—ã —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∏—Å–∫ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è.',
          timeline: '–í —Ç–µ—á–µ–Ω–∏–µ 2 –Ω–µ–¥–µ–ª—å',
          actionable_steps: [
            '–ó–∞–ø–∏—à–∏—Ç–µ—Å—å –∫ –º–∞–º–º–æ–ª–æ–≥—É',
            '–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–Ω–∏–∫—É —Å —Ü–∏—Ñ—Ä–æ–≤–æ–π –º–∞–º–º–æ–≥—Ä–∞—Ñ–∏–µ–π',
            '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–∑–æ–¥–æ—Ä–∞–Ω—Ç –≤ –¥–µ–Ω—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è)',
          ],
          related_findings: ['–°–µ–º–µ–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è', '–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ —Ä–∏—Å–∫–∞'],
          confidence_level: 0.92,
          is_completed: false,
          created_at: new Date().toISOString(),
        },
        {
          id: '2',
          type: 'lifestyle',
          priority: 'medium',
          title: '–£–≤–µ–ª–∏—á—å—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
          description: '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–º–æ–≥—É—Ç —Å–Ω–∏–∑–∏—Ç—å —Ä–∏—Å–∫ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π.',
          rationale: '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.',
          timeline: '–ù–∞—á–∞—Ç—å –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ',
          actionable_steps: [
            '–î–æ–±–∞–≤—å—Ç–µ 30 –º–∏–Ω—É—Ç —Ö–æ–¥—å–±—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ',
            '–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è',
            '–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å',
          ],
          related_findings: ['–ù–∏–∑–∫–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–î–∞–Ω–Ω—ã–µ —Å Apple Watch'],
          confidence_level: 0.85,
          is_completed: false,
          created_at: new Date().toISOString(),
        },
        {
          id: '3',
          type: 'nutrition',
          priority: 'medium',
          title: '–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∫–ª–µ—Ç—á–∞—Ç–∫–∏ –≤ —Ä–∞—Ü–∏–æ–Ω',
          description: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∫–ª–µ—Ç—á–∞—Ç–∫–∏ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ –∏ —Å–Ω–∏–∑–∏—Ç—å —Ä–∏—Å–∫ –¥–∏–∞–±–µ—Ç–∞.',
          rationale: '–ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∫–ª–µ—Ç—á–∞—Ç–∫–∏ –≤ —Ä–∞—Ü–∏–æ–Ω–µ.',
          timeline: '–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞',
          actionable_steps: [
            '–î–æ–±–∞–≤—å—Ç–µ –æ–≤–æ—â–∏ –∫ –∫–∞–∂–¥–æ–º—É –ø—Ä–∏–µ–º—É –ø–∏—â–∏',
            '–í—ã–±–∏—Ä–∞–π—Ç–µ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
            '–í–∫–ª—é—á–∏—Ç–µ –≤ —Ä–∞—Ü–∏–æ–Ω –±–æ–±–æ–≤—ã–µ',
          ],
          related_findings: ['–ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è', '–†–∏—Å–∫ –¥–∏–∞–±–µ—Ç–∞'],
          confidence_level: 0.78,
          is_completed: false,
          created_at: new Date().toISOString(),
        },
        {
          id: '4',
          type: 'monitoring',
          priority: 'low',
          title: '–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
          description: '–†–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–º–æ–∂–µ—Ç –≤—ã—è–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Ä–∞–Ω–Ω–µ–π —Å—Ç–∞–¥–∏–∏.',
          rationale: '–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –∏ —Å–µ–º–µ–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–±—É—é—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è.',
          timeline: '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ',
          actionable_steps: [
            '–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —Ç–æ–Ω–æ–º–µ—Ç—Ä –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
            '–ò–∑–º–µ—Ä—è–π—Ç–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è',
            '–í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π',
          ],
          related_findings: ['–í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã', '–°–µ–º–µ–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –≥–∏–ø–µ—Ä—Ç–æ–Ω–∏–∏'],
          confidence_level: 0.70,
          is_completed: false,
          created_at: new Date().toISOString(),
        },
      ];

      setRecommendations(mockRecommendations);

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π';
      setError(errorMessage);
    } finally {
      setIsLoading(false);
    }
  }, [user]);

  const markAsCompleted = useCallback(async (recommendationId: string): Promise<boolean> => {
    try {
      setRecommendations(prev => 
        prev.map(rec => 
          rec.id === recommendationId 
            ? { ...rec, is_completed: true }
            : rec
        )
      );

      // In a real implementation, save to database
      return true;
    } catch (err) {
      console.error('Error marking recommendation as completed:', err);
      return false;
    }
  }, []);

  const dismissRecommendation = useCallback(async (recommendationId: string): Promise<boolean> => {
    try {
      setRecommendations(prev => prev.filter(rec => rec.id !== recommendationId));
      return true;
    } catch (err) {
      console.error('Error dismissing recommendation:', err);
      return false;
    }
  }, []);

  const applyFilters = useCallback((newFilters: RecommendationFilters) => {
    setFilters(newFilters);
  }, []);

  const applyFiltersInternal = useCallback(() => {
    let filtered = [...recommendations];

    if (filters.type) {
      filtered = filtered.filter(rec => rec.type === filters.type);
    }

    if (filters.priority) {
      filtered = filtered.filter(rec => rec.priority === filters.priority);
    }

    if (filters.completed !== undefined) {
      filtered = filtered.filter(rec => rec.is_completed === filters.completed);
    }

    setFilteredRecommendations(filtered);
  }, [recommendations, filters]);

  // Calculate stats
  const stats = {
    total: recommendations.length,
    completed: recommendations.filter(rec => rec.is_completed).length,
    high_priority: recommendations.filter(rec => rec.priority === 'high').length,
    completion_rate: recommendations.length > 0 
      ? recommendations.filter(rec => rec.is_completed).length / recommendations.length * 100
      : 0,
  };

  const hasRecommendations = recommendations.length > 0;
  const hasHighPriorityRecommendations = recommendations.some(rec => rec.priority === 'high' && !rec.is_completed);

  const utils = {
    groupByType: (): Record<string, Recommendation[]> => {
      return recommendations.reduce((acc, rec) => {
        if (!acc[rec.type]) acc[rec.type] = [];
        acc[rec.type].push(rec);
        return acc;
      }, {} as Record<string, Recommendation[]>);
    },

    groupByPriority: (): Record<string, Recommendation[]> => {
      return recommendations.reduce((acc, rec) => {
        if (!acc[rec.priority]) acc[rec.priority] = [];
        acc[rec.priority].push(rec);
        return acc;
      }, {} as Record<string, Recommendation[]>);
    },

    getTypeIcon: (type: string): string => {
      const icons = {
        lifestyle: 'üèÉ‚Äç‚ôÄÔ∏è',
        medical: 'üè•',
        nutrition: 'ü•ó',
        exercise: 'üí™',
        monitoring: 'üìä',
      };
      return icons[type as keyof typeof icons] || 'üìù';
    },

    getPriorityColor: (priority: string): string => {
      const colors = {
        high: '#E74C3C',
        medium: '#FFB347',
        low: '#27AE60',
      };
      return colors[priority as keyof typeof colors] || '#6B7280';
    },

    formatTimeline: (timeline: string): string => {
      return timeline;
    },
  };

  return {
    recommendations,
    filteredRecommendations,
    isLoading,
    error,
    refreshRecommendations,
    markAsCompleted,
    dismissRecommendation,
    applyFilters,
    stats,
    hasRecommendations,
    hasHighPriorityRecommendations,
    utils,
  };
};
