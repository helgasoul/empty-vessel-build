
import { useQuery } from '@tanstack/react-query';
import { useState, useEffect, useCallback } from 'react';

interface AirQualityData {
  pm25: number;
  pm10: number;
  ozone: number;
  no2: number;
  so2: number;
  co: number;
  aqi: number;
  category: 'good' | 'moderate' | 'unhealthy_for_sensitive' | 'unhealthy' | 'very_unhealthy' | 'hazardous';
}

interface WeatherData {
  temperature: number;
  humidity: number;
  windSpeed: number;
  uvIndex: number;
  pressure: number;
}

interface LocationData {
  latitude: number;
  longitude: number;
  city?: string;
  country?: string;
}

const useEnvironmentalData = () => {
  const [location, setLocation] = useState<LocationData | null>(null);
  const [locationError, setLocationError] = useState<string | null>(null);
  const [isRequestingLocation, setIsRequestingLocation] = useState(false);
  const [geolocationSupported, setGeolocationSupported] = useState(true);

  const requestGeolocation = useCallback(() => {
    console.log('üåç –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏...');
    setIsRequestingLocation(true);
    setLocationError(null);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    if (!navigator.geolocation) {
      console.error('‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º');
      setGeolocationSupported(false);
      setLocationError('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é');
      setIsRequestingLocation(false);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–æ—Å–∫–≤—ã –∫–∞–∫ fallback
      console.log('üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–æ—Å–∫–≤—ã –∫–∞–∫ fallback');
      setLocation({
        latitude: 55.7558,
        longitude: 37.6173,
        city: '–ú–æ—Å–∫–≤–∞',
        country: '–†–æ—Å—Å–∏—è'
      });
      return;
    }

    console.log('‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    if ('permissions' in navigator) {
      navigator.permissions.query({ name: 'geolocation' }).then((result) => {
        console.log('üîê –°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:', result.state);
        
        if (result.state === 'denied') {
          console.warn('‚ö†Ô∏è –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
          setLocationError('–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.');
          setIsRequestingLocation(false);
          // Fallback –∫ –ú–æ—Å–∫–≤–µ
          setLocation({
            latitude: 55.7558,
            longitude: 37.6173,
            city: '–ú–æ—Å–∫–≤–∞',
            country: '–†–æ—Å—Å–∏—è'
          });
          return;
        }
      }).catch((error) => {
        console.log('‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—Ä–æ—Å:', error);
      });
    }

    const options = {
      enableHighAccuracy: false, // –£–º–µ–Ω—å—à–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
      timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥
      maximumAge: 600000 // 10 –º–∏–Ω—É—Ç
    };

    console.log('üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å –æ–ø—Ü–∏—è–º–∏:', options);

    navigator.geolocation.getCurrentPosition(
      (position) => {
        console.log('üéâ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        console.log('üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', {
          latitude: position.coords.latitude,
          longitude: position.coords.longitude,
          accuracy: position.coords.accuracy
        });
        
        setLocation({
          latitude: position.coords.latitude,
          longitude: position.coords.longitude
        });
        setLocationError(null);
        setIsRequestingLocation(false);
        
        console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
      },
      (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
        
        let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
        
        switch (error.code) {
          case error.PERMISSION_DENIED:
            errorMessage = '–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.';
            console.error('üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏');
            break;
          case error.POSITION_UNAVAILABLE:
            errorMessage = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
            console.error('üì° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            break;
          case error.TIMEOUT:
            errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
            console.error('‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏');
            break;
          default:
            console.error('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error.message);
            break;
        }
        
        setLocationError(errorMessage);
        setIsRequestingLocation(false);
        
        // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–æ—Å–∫–≤—ã
        console.log('üìç –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–æ—Å–∫–≤—ã');
        setLocation({
          latitude: 55.7558,
          longitude: 37.6173,
          city: '–ú–æ—Å–∫–≤–∞',
          country: '–†–æ—Å—Å–∏—è'
        });
      },
      options
    );
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    console.log('üöÄ useEnvironmentalData: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è');
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±—Ä–∞—É–∑–µ—Ä–æ–º
    const timer = setTimeout(() => {
      console.log('‚è∞ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏...');
      requestGeolocation();
    }, 1000);

    return () => clearTimeout(timer);
  }, [requestGeolocation]);

  // –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞
  const { data: airQualityData, isLoading: airQualityLoading, error: airQualityError } = useQuery({
    queryKey: ['airQuality', location?.latitude, location?.longitude],
    queryFn: async (): Promise<AirQualityData | null> => {
      if (!location) {
        console.log('üå¨Ô∏è –õ–æ–∫–∞—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞');
        return null;
      }

      console.log('üå¨Ô∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞ –¥–ª—è:', location);

      try {
        const url = `https://air-quality-api.open-meteo.com/v1/air-quality?latitude=${location.latitude}&longitude=${location.longitude}&current=pm10,pm2_5,ozone,nitrogen_dioxide,sulphur_dioxide,carbon_monoxide&timezone=auto`;
        console.log('üîó URL –∑–∞–ø—Ä–æ—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞:', url);
        
        const response = await fetch(url);
        console.log('üì° –û—Ç–≤–µ—Ç API –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞:', response.status, response.statusText);

        if (!response.ok) {
          throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();
        console.log('üìä –î–∞–Ω–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ –ø–æ–ª—É—á–µ–Ω—ã:', data);

        const current = data.current;

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º AQI –Ω–∞ –æ—Å–Ω–æ–≤–µ PM2.5
        const pm25 = current.pm2_5 || 0;
        let aqi = 0;
        let category: AirQualityData['category'] = 'good';

        if (pm25 <= 12) {
          aqi = Math.round((50 / 12) * pm25);
          category = 'good';
        } else if (pm25 <= 35.4) {
          aqi = Math.round(((100 - 51) / (35.4 - 12.1)) * (pm25 - 12.1) + 51);
          category = 'moderate';
        } else if (pm25 <= 55.4) {
          aqi = Math.round(((150 - 101) / (55.4 - 35.5)) * (pm25 - 35.5) + 101);
          category = 'unhealthy_for_sensitive';
        } else if (pm25 <= 150.4) {
          aqi = Math.round(((200 - 151) / (150.4 - 55.5)) * (pm25 - 55.5) + 151);
          category = 'unhealthy';
        } else if (pm25 <= 250.4) {
          aqi = Math.round(((300 - 201) / (250.4 - 150.5)) * (pm25 - 150.5) + 201);
          category = 'very_unhealthy';
        } else {
          aqi = Math.round(((500 - 301) / (500.4 - 250.5)) * (pm25 - 250.5) + 301);
          category = 'hazardous';
        }

        const result = {
          pm25: current.pm2_5 || 0,
          pm10: current.pm10 || 0,
          ozone: current.ozone || 0,
          no2: current.nitrogen_dioxide || 0,
          so2: current.sulphur_dioxide || 0,
          co: current.carbon_monoxide || 0,
          aqi,
          category
        };

        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞:', result);
        return result;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞:', error);
        throw error;
      }
    },
    enabled: !!location,
    staleTime: 1000 * 60 * 30, // 30 –º–∏–Ω—É—Ç
    retry: 3,
  });

  // –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const { data: weatherData, isLoading: weatherLoading, error: weatherError } = useQuery({
    queryKey: ['weather', location?.latitude, location?.longitude],
    queryFn: async (): Promise<WeatherData | null> => {
      if (!location) {
        console.log('üå§Ô∏è –õ–æ–∫–∞—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã');
        return null;
      }

      console.log('üå§Ô∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è:', location);

      try {
        const url = `https://api.open-meteo.com/v1/forecast?latitude=${location.latitude}&longitude=${location.longitude}&current=temperature_2m,relative_humidity_2m,wind_speed_10m,uv_index,surface_pressure&timezone=auto`;
        console.log('üîó URL –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã:', url);

        const response = await fetch(url);
        console.log('üì° –û—Ç–≤–µ—Ç API –ø–æ–≥–æ–¥—ã:', response.status, response.statusText);

        if (!response.ok) {
          throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();
        console.log('üìä –ü–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data);

        const current = data.current;

        const result = {
          temperature: current.temperature_2m || 0,
          humidity: current.relative_humidity_2m || 0,
          windSpeed: current.wind_speed_10m || 0,
          uvIndex: current.uv_index || 0,
          pressure: current.surface_pressure || 0
        };

        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', result);
        return result;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error;
      }
    },
    enabled: !!location,
    staleTime: 1000 * 60 * 15, // 15 –º–∏–Ω—É—Ç
    retry: 3,
  });

  const isLoading = airQualityLoading || weatherLoading || isRequestingLocation;
  const error = airQualityError || weatherError;

  // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  useEffect(() => {
    console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ useEnvironmentalData:', {
      location,
      isLoading,
      isRequestingLocation,
      locationError,
      geolocationSupported,
      airQualityData: !!airQualityData,
      weatherData: !!weatherData,
      error: error?.message
    });
  }, [location, isLoading, isRequestingLocation, locationError, geolocationSupported, airQualityData, weatherData, error]);

  return {
    location,
    airQualityData,
    weatherData,
    isLoading,
    error,
    locationError,
    isRequestingLocation,
    geolocationSupported,
    requestGeolocation
  };
};

export default useEnvironmentalData;
